
# Function for the analysis menu
def analysis_menu():
    print ("\nAnalysis Menu\n")
    print ("1. Carry out a new analysis")
    print ("2. Display the previous analysis")
    print ("3. Exit to main menu")

    analysis_choice = input("Enter your choice: ")
    if analysis_choice == '1':
        analysis_new()
    elif analysis_choice == '2':
        display_previous_analysis()
    elif analysis_choice == '3':
        return
    else:
        print ("Invalid choice. Please enter a number between 1 and 3")

# A function to call the largest claim
def largest_claim(claims):
    if not claims:
        return None
    else:
        largest_claim = float('-inf') #Initialising with -infinity to avoid potential issues when comparing claim amounts 
        for claim in claims[1:]: #Iteration throughout all claim values, continuously replacing the variable largest_claim with the next claim if larger until the end of all the claim values have been assessed
            claim_amount = float(claim[2])
            if claim_amount > largest_claim: 
                largest_claim = claim_amount
        return largest_claim

# A function to call the smallest claim
def smallest_claim(claims):
    if not claims:
        return None
    else:
        smallest_claim = float('inf') #Initialising with +infinity to avoid potential issues when comparing claim amounts 
        for claim in claims[1:]: #Iteration throughout all claim values, continuously replacing the variable largest_claim with the next claim if smaller until the end of all the claim values have been assessed
            claim_amount = float(claim[2])
            if claim_amount < smallest_claim: 
                smallest_claim = min(smallest_claim, claim_amount)
        return smallest_claim

# A function to call the value for the average claim value
def mean_claim(claims):
    if not claims:
        return None
    else:
        total = 0
        for claim in claims[1:]: #Iteration to find the total
            total = total + float(claim[2])
        mean_claim = total / (len(claims) - 1) #disregarding the first row
        return mean_claim

# A function to call the standard deviation
def std_dev_claim(claims):
    if len(claims) < 2:
        return None
    mean = mean_claim(claims)
    diff_sum_squared = 0 #Variable consisting of the sum of the squared differences, required to find the variance and therefore the standard deviation
    for claim in claims[1:]: #Iterates through the claim values and minuses the mean from it, then squares the result
        diff_sum_squared = diff_sum_squared + (float(claim[2]) - mean) ** 2
    std_dev = (diff_sum_squared / (len(claims) - 2)) ** 0.5 #Thus following the formula sum of the squares - square of the mean / n - 1 for the sample, rather than the population
    return std_dev
    
#Function to save the run_analysis into a dictionary format, utilising the earlier functions for the calculations
def run_analysis(policyholders, claims): 
    results = {
        'number of policy holders': len(policyholders),
        'number of claims': len(claims),
        'claim frequency': len(claims) / len(policyholders) if len(policyholders) > 0 else 0,
        'smallest claim': smallest_claim(claims),
        'largest claim': largest_claim(claims),
        'mean claim': mean_claim(claims),
        'standard deviation of claims': std_dev_claim(claims)
    }
    return results
    
# A function to run a new analysis on policy holders and claims
# Results are then displayed and saved to a file
def analysis_new(): 
    print ("\nYou have chosen to run an analysis on the current file")
    policy_holders = read_policy_holder() # Read policy holder and claims data
    claims = read_claims()
    results = run_analysis(policy_holders, claims) #Perfroms analysis
    for key, value in results.items(): # Displays the results of the analysis
        print (key, ": ", value)
    saved_analysis(results) # Saves the results of the analysis to a file

# Function that displays the analysis results that were previously saved
def display_previous_analysis():
    print ("\nYou have chosen to display the previous analysis")
    saved_analysis = retrieve_saved_analysis() # Retreive and displays the saved analysis

# Function that saves the provided anlysis results to a file
# The user is prompted to enter the filename
def saved_analysis(results):
    print("\nYou have successfully saved your analysis!")
    # The user assigns a name to the file with the analysis as they may want to save a number of them
    filename = input_string("Enter the filename to save the analysis: ") + ".txt" 
    with open(filename, 'w') as file: # Opens the file in write mode and saves the results
        for key, value in results.items():
            file.write(f"{key}: {value}\n")
    print("\nAnalysis saved successfully in '{}'.".format(filename)) # Notifies the user that the file has been saved

# A function to retrieve and display a previously saved analysis
def retrieve_saved_analysis():
    filename = input_string("Enter the filename of the saved analysis: ") + ".txt" # Asks the user for the filename of the analysis they want
    try: # Opens the file and reads its contents
        with open(filename, 'r') as file:
            print("\nSaved Analysis:")
            for line in file:
                print(line.strip())
    except FileNotFoundError: # Notifies the user if the file is not found
        print("\nFile not found. Please make sure the filename is correct.")
