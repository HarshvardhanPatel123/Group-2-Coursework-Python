def main_menu_display():
    print ("\nWelcome to your claims and analysis tool\n")
    print ("==== Main Menu ====")
    print ("1. Policyholder Menu (View or add Policyholders)")
    print ("2. Claim menu (View or add Claims)")
    print ("3. Analysis menu (Run an analysis or display a previous one)")
    print ("4. Exit")

def main_menu():
    exit_code = False #Due to an issue concerning repeat menu calls, constant exit_code created to make sure the code is exitted when the user wishes
    while not exit_code:
        main_menu_display()
        main_choice = input("Enter your option ")
        if main_choice == '1':
            policy_menu()
        elif main_choice == '2':
            claims_menu()
        elif main_choice == '3':
            analysis_menu()
        elif main_choice == '4':
            exit_code = True
        else:
            print("Invalid choice, enter a number between 1 and 4 please")
    print("Exiting. . .")


def policy_menu_display(): #The function to create a menu for the policyholders
        print ("\nYou have chosen to view the policyholder menu\n")
        print("===== Policy Holder Menu =====")
        print("1. View Policy holders details")
        print("2. Add a new policy holder")
        print("3. Exit to main menu")
        print("================")


def policy_menu(): #Combining the choice correlation to the following function to be called
    while True:   
        policy_menu_display()
        policy_choice = input("Enter your option ")
        if policy_choice == '1':
            view_policy_details()
        elif policy_choice == '2':
            add_new_policy()
        elif policy_choice == '3':
            return
        else:
            print("Invalid choice, enter a number between 1 and 3 please")


def read_policy_holder(): #Important function to begin reading the policy holder excel file, saved as a csv file, into a python list for manipulation
        policy_holder = []
        try:
                with open('policyholders.csv', 'r', encoding = 'utf-8') as file: #standard code for reading a file
                          for line in file:
                                  policy_holder.append(line.strip().split(','))
        except FileNotFoundError:
                pass
        return policy_holder

def save_policy_holder(policy_holder): #Function called if the user decides to save the newly added policy holder to the excel file
        with open ('policyholders.csv', 'w', encoding = 'utf-8') as file: 
                for holder in policy_holder:
                        file.write(','.join(holder) + '\n')
                
        


def view_policy_details(): #Function called if 1 is chosen in the policyholder menu
    policy_number = input("Input your policy number specific to the policy holder you are looking for ")
    policy_holder = read_policy_holder() #Prepares the list to represent the file
    #print(policy_holder)
    exists = False #Only turns true if policy number exists in the file
    for holder in policy_holder: #Iterates through the file to find the policy number inputted
        if holder[0] == policy_number:
            exists = True
            print("\nPolicyholder Details:")
            print(f"Policy Number: {holder[0]}")
            print(f"First Name: {holder[1]}")
            print(f"Surname: {holder[2]}")
            print(f"Age: {holder[3]}")
            print(f"Gender: {holder[4]}")
            print(f"Area: {holder[5]}")
    if not exists:
        print("That policy number is not found in the file!")

           

def add_new_policy(): #Function called if 2 is chosen in the policyholder menu
    policy_number = input("Enter your new policy number (e.g P1234567) ")
    if policy_number.startswith('P') and policy_number[1:].isdigit() and len(policy_number) == 8: #Input validation for the policy number
            policy_holder = read_policy_holder()
            for holder in policy_holder:
                    if holder[0] == policy_number: #Iteration to check if there is no duplicate policy number
                            print("The policy number you have inputted already correlates to another member!")
                            return
            first_name = input("First Name: ") #No validation for the input of the first name, only for the rest of the inputs as proceeding
            surname = input("Last name: ")
            if not surname:
                    print("Surname cannot be empty")
                    return
            age = input("Age (Young/Old): ").capitalize()

            if age != "Young" and age != "Old":
                print ("Invalid input, please enter exactly Young or Old")
                return
            
            gender = input("Gender (Male/Female): ").capitalize()

            if gender != "Male" and gender != "Female":
                print ("Invalid input, please enter exactly Male or Female")
                return
            
            area = input("Area (North/Central/South): ").capitalize()

            if area != "North" and area != "Central" and area != "South":
                print ("Invalid input, please enter North, Central or South!")
                return
            

            new_policy_holder = [policy_number, first_name, surname, age, gender, area]
            policy_holder.append(new_policy_holder) #appends the new holder to the python list, but not the file

            save_choice = input_string("Do you want to save the new policholder to the file? Yes/No ").lower()
            if save_choice == "yes":
                save_policy_holder(policy_holder) #if the user wishes, the new created policy holder is saved onto the file
                print("New policyholder added successfully.")
            else:
                return
    else:
           print ("Invalid input, please use the example given")
           return
    

#Funtion to read claims
def read_claims():
    claims = []
    try:
        with open('claims.csv', 'r', encoding='utf-8') as file:
            for line in file:
                claims.append(line.strip().split(','))
    except FileNotFoundError:
        # If the file doesn't exist, it returns an empty list
        pass
    return claims

#Function to save claims
def save_claims(claims):
    with open('claims.csv', 'w', encoding='utf-8') as file:
        for claim in claims:
            file.write(','.join(claim) + '\n')

#Function to generate next claim number
def generate_next_claim_number(claims):
    if not claims:
        return 'C00001'
    last_claim = claims[-1][0]
    if last_claim.startswith('C') and last_claim[1:].isdigit():
        next_number = int(last_claim[1:]) + 1
        return f'C{next_number:05d}'
    else:
        # In case the last claim number is not in the expected format
        return 'C00001'

#Function to add claims
def add_claim():
    claims = read_claims()
    claim_number = generate_next_claim_number(claims)
    policy_number = input("Enter policy number (P followed by 7 digits): ")
    if not policy_number.startswith('P') or len(policy_number) != 8:
        print("Invalid policy number format.")
        return
    else:
        claim_amount = input("Enter claim amount: ")
        if not claim_amount.isdigit():
            print("Claim amount should be a numeric value.")
            return

    claims.append([claim_number, policy_number, claim_amount])
    save_claims(claims)
    print("Claim added successfully.")


# Function to edit an existing claim
def edit_claim():
    claims = read_claims()
    claim_number = input("Enter the claim number to edit: ")

    found = False
    for claim in claims:
        if claim[0] == claim_number:
            found = True
            new_policy_number = input("Enter new policy number (or press Enter to keep current): ")
            # Validate policy number
            if new_policy_number and not (new_policy_number.startswith('P') and len(new_policy_number) == 8):
                print("Invalid policy number format.")
                return
            else:
                new_claim_amount = input("Enter new claim amount (or press Enter to keep current): ")
                # Validate claim amount
                if new_claim_amount and not new_claim_amount.isdigit():
                    print("Claim amount should be a numeric value.")
                    return

            # Update the claim if validation is passed
            if new_policy_number:
                claim[1] = new_policy_number
            if new_claim_amount:
                claim[2] = new_claim_amount

            break

    if not found:
        print("Claim number not found.")
        return

    save_claims(claims)
    print("Claim updated successfully.")


# Function for displaying the claims
def display_claims():
    claims = read_claims()

    # Check if there are any claims
    if not claims:
        print("No claims to display.")
        return

    # Constants for formatting
    column_width = 20

    # Separator
    header = f" {'Claim Number':^{column_width}} {'Policy Number':^{column_width}} {'Claim Amount':^{column_width}} "
    separator = '+' + '-' * (len(header) - 2) + '+'


    # Rows
    for claim in claims:
        row = f"|{claim[0]:^{column_width}}|{claim[1]:^{column_width}}|{claim[2]:^{column_width}}|"
        print(row)
        print(separator)

 
# Main function to run the claims menu
def claims_menu():
    while True:
        print("\nClaims Menu\n")
        print("1. View All Claims")
        print("2. Add a New Claim")
        print("3. Edit an Existing Claim")
        print("4. Exit to main menu")

        claims_choice = input("Enter your choice: ")
        if claims_choice == '1':
            display_claims()
        elif claims_choice == '2':
            add_claim()
        elif claims_choice == '3':
            edit_claim()
        elif claims_choice == '4':
            return
        else:
            print("Invalid choice. Please enter a number between 1 and 4.")


def analysis_menu():
    print ("\nAnalysis Menu\n")
    print ("1. Carry out a new analysis")
    print ("2. Display the previous analysis")
    print ("3. Exit to main menu")

    analysis_choice = input("Enter your choice: ")
    if analysis_choice == '1':
        analysis_new()
    elif analysis_choice == '2':
        display_previous_analysis()
    elif analysis_choice == '3':
        return
    else:
        print ("Invalid choice. Please enter a number between 1 and 3")
        
'''def run_analysis(policyholders, claims):
    results = {
        'number of policy holders': len(policyholders),
        'number of claims': len(claims),
        'claim frequency':
        'smallest claim':
        'largest claim':
        'mean claim':
        'standard deviation of claims':
    }
    return results
'''    

def analysis_new():
    print ("You have chosen to run an analysis on the current file")


def display_previous_analysis():
    print ("You have chosen to display the previous analysis")
    



def input_integer(prompt): #Function for integer validation, just in case
    while True:
        try:
            return int(input(prompt))
        except ValueError:
            print("Invalid input. Please enter an integer.")


def input_string(prompt): #Function for string validation, just in case
    while True:
        try:
            return str(input(prompt))
        except ValueError:
            print("Invalid input.")



if __name__ == "__main__":
    main_menu()

